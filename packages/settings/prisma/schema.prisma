// Synter Settings Schema - SQLite version for local development
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Workspace {
  id              String   @id @default(cuid())
  name            String
  domain          String?
  ownerId         String
  sharingPolicy   String   // JSON stored as string in SQLite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  users           User[]
  creditWallet    CreditWallet?
  paymentMethods  PaymentMethod[]
  invoices        Invoice[]
  invites         Invite[]
  reports         Report[]
  auditEvents     AuditEvent[]

  @@map("workspaces")
}

model User {
  id            String      @id @default(cuid())
  workspaceId   String      
  email         String      @unique
  name          String?
  role          String      // OWNER, BILLING_ADMIN, ADMIN, MEMBER, VIEWER
  status        String      @default("ACTIVE") // ACTIVE, DISABLED
  lastActiveAt  DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@map("users")
}

model PaymentMethod {
  id           String    @id @default(cuid())
  workspaceId  String    
  type         String    // "card", "bank_account"
  cardBrand    String?   // "visa", "mastercard", etc.
  cardLast4    String?
  cardExpMonth Int?
  cardExpYear  Int?
  isDefault    Boolean   @default(false)
  providerRef  String    // Stripe pm_...
  createdAt    DateTime  @default(now())
  
  // Relations
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@map("payment_methods")
}

model CreditWallet {
  id           String         @id @default(cuid())
  workspaceId  String         @unique
  balance      Int            @default(0) // credits
  autoEnabled  Boolean        @default(false)
  threshold    Int?           // credits
  topupAmount  Int?           // credits
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  ledger       CreditLedger[]
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("credit_wallets")
}

model CreditLedger {
  id           String        @id @default(cuid())
  walletId     String        
  delta        Int           // positive = credit, negative = debit
  reason       String        // PURCHASE, AUTO_RECHARGE, CONSUMPTION, REFUND, ADJUSTMENT, PROMO
  refType      String?       // "invoice", "report", "manual"
  refId        String?
  metadata     String?       // JSON stored as string in SQLite
  createdAt    DateTime      @default(now())
  
  // Relations
  wallet       CreditWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@index([walletId])
  @@index([createdAt])
  @@map("credit_ledger")
}

model Invoice {
  id           String         @id @default(cuid())
  workspaceId  String         
  totalCents   Int            // amount in cents
  taxCents     Int            @default(0) // tax in cents
  currency     String         @default("USD")
  status       String         @default("open") // "open", "paid", "voided", "uncollectible"
  providerId   String?        // Stripe invoice ID
  dueDate      DateTime?
  paidAt       DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@index([status])
  @@map("invoices")
}

model Invite {
  id          String    @id @default(cuid())
  workspaceId String    
  email       String    
  role        String    // ADMIN, MEMBER, VIEWER
  status      String    @default("PENDING") // PENDING, ACCEPTED, CANCELED, EXPIRED
  token       String    @unique
  expiresAt   DateTime  
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?
  
  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@index([token])
  @@map("invites")
}

model Report {
  id            String         @id @default(cuid())
  workspaceId   String         
  ownerUserId   String
  title         String
  description   String?
  data          String?        // JSON stored as string in SQLite
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  shareGrants   ShareGrant[]
  
  @@index([workspaceId])
  @@index([ownerUserId])
  @@map("reports")
}

model ShareGrant {
  id          String    @id @default(cuid())
  reportId    String    
  granteeType String    // USER, EMAIL, LINK
  granteeId   String?   // user ID or email
  permission  String    // VIEW, SHARE
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  
  // Relations
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([granteeType, granteeId])
  @@map("share_grants")
}

model ShareableLink {
  id          String    @id @default(cuid())
  reportId    String    // Report this link provides access to
  token       String    @unique // URL-safe random token
  scope       String    @default("WORKSPACE") // WORKSPACE, PUBLIC
  password    String?   // Optional password protection
  maxViews    Int?      // Limit view count
  viewCount   Int       @default(0)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?
  
  @@index([reportId])
  @@index([token])
  @@map("shareable_links")
}

model AuditEvent {
  id           String    @id @default(cuid())
  workspaceId  String    
  actorUserId  String
  action       String    // e.g., "billing.purchase_succeeded"
  targetType   String    // "user", "report", "payment_method", etc.
  targetId     String?
  context      String?   // JSON stored as string in SQLite
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  
  // Relations
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@index([actorUserId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_events")
}
